
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_ZTEST_ERROR_HOOK_H
#define Z_INCLUDE_SYSCALLS_ZTEST_ERROR_HOOK_H


#include <tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#include <linker/sections.h>


#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#if !defined(__XCC__)
#pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_ztest_set_fault_valid(bool valid);

__pinned_func
static inline void ztest_set_fault_valid(bool valid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		arch_syscall_invoke1(*(uintptr_t *)&valid, K_SYSCALL_ZTEST_SET_FAULT_VALID);
		return;
	}
#endif
	compiler_barrier();
	z_impl_ztest_set_fault_valid(valid);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define ztest_set_fault_valid(valid) do { 	sys_port_trace_syscall_enter(K_SYSCALL_ZTEST_SET_FAULT_VALID, ztest_set_fault_valid, valid); 	ztest_set_fault_valid(valid); 	sys_port_trace_syscall_exit(K_SYSCALL_ZTEST_SET_FAULT_VALID, ztest_set_fault_valid, valid); } while(false)
#endif
#endif


extern void z_impl_ztest_set_assert_valid(bool valid);

__pinned_func
static inline void ztest_set_assert_valid(bool valid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		arch_syscall_invoke1(*(uintptr_t *)&valid, K_SYSCALL_ZTEST_SET_ASSERT_VALID);
		return;
	}
#endif
	compiler_barrier();
	z_impl_ztest_set_assert_valid(valid);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define ztest_set_assert_valid(valid) do { 	sys_port_trace_syscall_enter(K_SYSCALL_ZTEST_SET_ASSERT_VALID, ztest_set_assert_valid, valid); 	ztest_set_assert_valid(valid); 	sys_port_trace_syscall_exit(K_SYSCALL_ZTEST_SET_ASSERT_VALID, ztest_set_assert_valid, valid); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
